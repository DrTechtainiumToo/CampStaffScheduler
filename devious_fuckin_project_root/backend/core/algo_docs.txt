Task Population and Sorting
Populating the Queue:
Finding Tasks: For each given time slot, tasks are identified that have a start time matching the time slot (find_tasks_in_time_slot). This involves filtering tasks where the current time slot equals the task's start time as indexed by start_times_iter.
Sorting Tasks:
By Duration: Tasks are first sorted by duration in descending order (sort_tasks_by_duration), prioritizing longer tasks.
By Tier: Subsequently, tasks are sorted by their tier to prioritize tasks of higher importance or urgency (sort_tasks_by_tier).
Handling Special Tasks:
Windowed Tasks: Tasks that might have flexible scheduling within certain time windows are collected separately (collect_windowed_tasks). This could involve tasks that are not strictly bound to start at the beginning of their time windows but have a preferred duration.

BASIC OVERVIEW ---------------
Start
|
|--> Initialize Schedule
|     |--> Create Time Slot Queues
|
|--> Populate Queues with Tasks
|     |--> Find Tasks for Each Time Slot
|     |--> Sort Tasks by Duration
|     |--> Sort Tasks by Tier
|     |--> Collect Windowed Tasks
|
|--> Assign Tasks For Each Time Period
      |--> Calculate Availble Employees In Period
      |--> For Each Task in Queue:
            |--> Check if still employees availble to assign tasks to in period
                  |--> Calculate Time Slots Needed
                  |--> Select Employees
                  |--> Assign Employees to Task
                  |--> Update Task and Employee Data
      |--> Roll over remaining windowed tasks to the end of the next time period's qeues
      |--> Warning message and log non-windwoed tasks that were unable to be scheduled in period
| --> Notify user if any tasks unable to schedule
End

Scheduling Algorithm Overview
├── Imports
│   ├── Standard Libraries (time, random)
│   ├── Typing (Dict, List, Any)
│   ├── Task and Employee Management (from backend.core)
│   └── Utility Functions (timer)
│
├── Function: scheduling_algo_prep
│   └── Purpose: Prepare sorting of tasks for efficiency (to be developed)
│
├── Class: Schedule
│   ├── Attributes:
│   │   ├── dynamicTimeSlotQueuesDict: Stores queues for each time slot
│   │   └── failed_to_schedule: Tracks tasks that could not be scheduled
│   │
│   ├── Methods:
│   │   ├── generate_schedule: Orchestrates the scheduling across all queues
│   │   └── generate_dynamic_time_slot_queues_for_day: Initializes queues for each time slot
│   │
│   └── Nested Class: dynamicTimeSlotQueue
│       ├── Attributes:
│       │   ├── queue: List of tasks in the queue
│       │   ├── daysTasks: Tasks distributed across days
│       │   ├── time_slot: Associated time slot for the queue
│       │   ├── length: Number of tasks in the queue
│       │   └── windowed_tasks_list: Tasks that are flexible in timing
│       │
│       ├── Methods:
│       │   ├── populate_queue: Fills the queue based on task starting times and other criteria
│       │   │   └── Nested Functions for Sorting:
│       │   │       ├── find_tasks_in_time_slot
│       │   │       ├── sort_tasks_by_duration
│       │   │       └── sort_tasks_by_tier
│       │   │
│       │   └── assign_tasks: Assigns tasks to available employees based on the time slot
│       │       └── Sub-functions:
│       │           ├── calculate_time_slots_for_duration
│       │           ├── assign_employees_to_task
│       │           └── update_data
│       │
│       └── Helper Functions:
│           ├── generate_list_of_eligible_employees
│           └── generate_assignment_probabilities
│
└── Function: instantiate_and_run_scheduler
    └── Calls: Schedule.generate_schedule
        └── Inputs: Time slot standards, task and employee managers, tasks list

number of employees / (num sum of timeslots btwn breakfast and lunch or lunch and dinner) (unless a counsler, then include night off, but more complicated cus vilbo and other stuff)
sum of timeslots btwn breakfast and lunch or lunch and dinner