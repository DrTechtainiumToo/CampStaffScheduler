# TODO List / Roadmap

A quick overview to help keep track of tasks, bugs, questions, and project roadmap items.

## 1. General Questions & Overall Notes

### Ideas & Refactoring:
- Consider using ChainMap on dictionaries to avoid creating new ones (if applicable, since everything is in functions).
- Look into using transfer functions in menu creation.
- TODO backend front end seperation: In the code above, task_manager is created in main.py and then passed to run_terminal or run_web. Technique: Pass the backend service (or specific functions) to the UI modules rather than having the UI import or instantiate them on its own. This makes the UI modules more testable and independent. What It Does: Acts as the orchestrator. This module (often called main.py or controller.py) reads a configuration (e.g., command-line arguments or a settings file) to determine which interface to launch.
How to Structure: It initializes the backend and then passes control to the appropriate UI module. For example
The backend functions should have clearly defined inputs and outputs (e.g., returning data structures or status messages) so the UI can display them or handle errors.

### Employee & Time Slot Ideas:
I LIKE THIS BUT FURTHER DOWN THE LINE FOR LARGE SCALE
- Use unique IDs for employees to simplify data handling:
  - Unique Identification: Avoid name duplications.
  - Data Linking: Connect certifications, task histories, etc.
- TODO: Auto-assign employee ID numbers and use them for task assignments. GOOD IDEA
Unique Identification: Automatically generating unique employee IDs is a robust way to avoid issues with duplicate names.
Data Linking: IDs can make it easier to reference employees in tasks, logs, and databases.
Simplifies Updates: If employee names or details change, the unique ID remains constant, ensuring consistent references.****
- TRADE OFF DECISION: Convert time slots (e.g., `dayTimeSlotsStandardizedStN` and `dayTimeSlotsStandardizedNtS`) into numerical representations for simpler operations. (#NOTE MAYBE idk bad idea, harder to debug and prob not alot faster by just using nums, also would have to rewrite alot of shit) MILITARY TIME?
- Consider using enums or similar constructs for human-readable but frequently used properties. (more: https://docs.python.org/3/howto/enum.html, https://docs.python.org/3/library/enum.html)
- another idea for timeslots: tho there are tradeoffs and would have to rewrite code: Configuration Management:
Read and write timeslot settings from a configuration file or database.
When the user updates the timeslots, update your configuration and have your backend functions reference this dynamic data. Dynamic Data Structures:
Use a dictionary or list to store timeslot information.
For example, store your timeslot mappings in a config object that can be updated when the user changes settings.

### Numeric Probability:
- Ensure probability values are numeric. (Set attributes to int if necessary; this has been done before.)

### Task & Availability Issues:
- TODO: Current code is not inclusive—create an "unavailable all day" functionality.
- TODO: Make tasks check their future unavailability.

### Bug Note:
- BIG PROBLEM NEED TO FIX, who system is based around how time is measured. I need to have an summary about how time works in the system. really a better sys overview overall
- Bug: When indicating unavailability from min to max time, the max time isn’t filled (because it's exclusive).
  - Possible Solutions:
    - Either change the logic (with potential confusion due to rigid time blocks) or add an extra slot at the end.
    - Alternatively, have the front-end validate and pass an "all day" flag to the back-end.
    - Note: Windowed time slots might have similar issues.

### General Questions:
- TODO: Define whether "night chore" should be set by time or after sweeting. Maybe leave to settings? like certain time, last timeslot, or after sweeting. need to make an easy function that can easily edit and update for all tasks when they can scheduledafter (SOLUTION maybe use the windowed tasks logic bc its kinda similar, bit nightchores has on logic so idk how that would work, part of larger time managment question. Also on how u want the data to come from but can make algo and backedn take it and then let front end worry about how to handle it).

### Data Storage:
- DONE: Redo `defaultInfo` CSV file storage, retrieval, and interpretation (add a gender column).
- TODO: Create a save system for preferential data that isn’t repeated in `defaultInfo` (requires CSV readers & converters).
- TODO: Finish getting all the time and special events listed.

## 2. Excel Output

### Date & Week Settings:
- TODO (MEDIUM - PRIORITY !!): Create a system to input a week or starting week, and display the week number or formal date.

### Formatting Options:
- TODO (HARD - FOR FUTURE): Develop a format setting system (pre-made styles selectable; allow easy creation of new styles).
- TODO (MEDIUM HARD - SECOND PRIORITY): Figure out how to implement up/down toggles and different styles.
- DONE: Standardize font size and style for all tasks; implement auto size and fit. (THIRD PRIORITY)
- TODO: Make time slot cubes a little bigger (investigate sheet printing dimensions).
- TODO: Define standard color fills for borders and set defaults for reset.
- TODO (MEDIUM - HARD, 2-3 hours, FIRST PRIORITY): Figure out printing parameters and adjust box sizes accordingly.
- TODO: For employee formatting, enable text auto-fit.
- TODO: Move magic numbers and settings to a configuration file.
- TODO: Implement dynamic chart sizes (all text sizes should be setting-driven).
- TODO: Adjust cell heights to ensure consistency; review documentation.
- TODO: Include date, time, and logger options in the JSON settings file.

## 3. FIXME / Code Refactoring Notes

### Settings & Excel Integration:
- Refactor: Separate settings-loading logic from the Excel-writing code. Consider moving it to its own module or setup function.

### Breaking Down Excel Function:
- Consider splitting `excel(...)` into smaller methods:
  - `_initialize_worksheet(...)` – Configure the workbook/worksheet.
  - `_write_title_and_date(...)` – Handle title, date, quote, etc.
  - `_write_employees_and_slots(...)` – Populate tasks.
  - `_finalize_worksheet(...)` – Add footers, credits, etc.
- Rename `excel(...)` to something more descriptive (e.g., `write_to_excel(...)` or `generate_excel_schedule(...)`).
- Improve variable names (e.g., change `row` to `current_employee_row_index` for clarity).

### Unavailability & Edge Cases:
- Check merging logic for consecutive unavailable slots:
  - FIXME: Ensure proper merging when the last time slot is unavailable.
  - FIXME: Verify handling of edge-of-day conditions (if `next_time_slot` is None, ensure final merge is correct).

### Date Handling:
- FIXME: Verify conditionals like `GET_NEXT_DAY` to ensure correct day shifting, especially around midnight or time zones.

## 4. Algo / Project Roadmap

### In-Progress / Upcoming Features

#### Preferences System:
- IN PROGRESS: Preferences system.
- TODO: Develop an importance system to group tasks.
- REDESIGN: Settings and multi-type data imports (CSV and JSON).
- TODO: Write an automatic tier-determining system.
- TODO: Implement a village schedule and a smart off-week system with associated tasks.
- TODO: Develop Sweetings functionality.

#### Assignment Algorithm:
- IN PROGRESS: Overall algorithm development (likely a week-long affair).
- IN PROGRESS: Assignment ordering system.
- IN PROGRESS: Anti-certification use-up system.
- IN PROGRESS: Ensure everyone gets at least one task (e.g., Playtime/Off).
- IN PROGRESS: Prevent co-counselor scheduling conflicts.
- IN PROGRESS: Disallow double-consecutive assignments (e.g., no 2 KWSATS in a row).

#### CSV / Excel Output:
- IN PROGRESS: Core feature to format CSV/Excel output.
- PUNTED: Decide on a format for Google Sheets or an app plugin.
- IN PROGRESS: Consider web application deployment (display in browser, possibly Flask/Google Cloud).

#### GUI Development:
- DRAFTING: Initial GUI sketches and prototypes.
- TODO: Final review for user-friendliness, scalability, and bug fixes.
- TODO: Documentation and bug reporting/diagnostic mechanism (possibly with an internal log).