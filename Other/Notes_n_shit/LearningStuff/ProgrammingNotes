
Programming Notes

UNIT TESTS
Unit tests evaluate the smallest parts of an application—typically individual functions or methods—to ensure they perform expected tasks correctly. Good unit tests are:
Isolated: Tests should not depend on external systems or the results of other tests.
Repeatable: Tests should provide the same results every time you run them.
Comprehensive: They should cover all cases, including typical use cases, edge cases, and potential error conditions.


Keys() vs list() so for non printing cases where I need the keys .keys() is slightly more efficenty. But if I need it to print out i need to use list() on the keys so i dont get that weird dict_keys thing at the beginning. But overall doesn't really matter. The .keys() in pyhton 3x is a veiw object which is slightly more memory efficent. But unless bottleneck then prioritize readability. But if need .keys a bunch, easier just to create a list.

You use == when comparing values and is when comparing identities.
is compares two objects in memory, == compares their values.
in is a memebership operator, but also part of the for loop syntax for iteration
or combines conditional statments, and returns True if at least one of the conditions evaluates to True, and false otherwise. Returns true on first operand that is Truthy and does not eval the rest. Use to see if something in a list for example is true. DONT CONFUSE WITH AND


"""Use clear, descriptive names for modules and functions to indicate what they do.
Keep related functions within the same module to maintain coherence in your codebase.
Avoid circular imports, where two modules import each other as this can lead to problems in execution. You can often resolve circular imports by reorganizing your functions into different modules or creating a new module for shared functions.
Use a __init__.py file in each directory that should be treated as a package. This isn’t necessary in Python 3.3 and above, but it can still be useful for clarifying package structure.
Limit the use of global variables between modules. Instead, pass data to functions as parameters."""

#try else

#https://mypy.readthedocs.io/en/stable/getting_started.html


Code Notes and Style ---------


Optimization ---------------

Data Structures: Choose appropriate data structures for your problem. For example, dictionaries offer constant-time lookups, while lists may require linear time for certain operations.
Avoid Unnecessary Work: Review your code and eliminate any unnecessary computations or redundant operations.
Cache Results: If your function repeatedly performs the same calculations with identical inputs, consider caching the results to avoid redundant computation.
Parallelization: If your task is highly parallelizable, you can leverage Python's multiprocessing or threading modules to distribute the workload across multiple CPU cores.


For algorithm

Areas for Improvement:
Code Readability and Structure: The code could benefit from more consistent formatting, naming conventions, and simplification of complex expressions to improve readability.
Error Handling: While there are comments indicating awareness of potential issues, explicit error handling (e.g., using try-except blocks) is not evident. Proper error handling can make the code more robust and easier to debug.
Efficiency and Optimization: The use of nested loops and repeated searches through data structures could potentially lead to inefficiencies, especially with large datasets. Optimizing these areas by using more efficient data structures or algorithms could improve performance.
Commented-out Code and TODOs: The presence of TODO comments and commented-out code suggests that the code is a work in progress. Finalizing these sections and removing unused code can make the codebase cleaner and more maintainable.
Dependency on Global Variables: The use of global variables (or variables that appear to be used globally within the class, such as daysTasks) can lead to code that is difficult to debug and maintain. Passing these variables as arguments to functions or encapsulating them within class instances can improve modularity and reusability.
Testing and Documentation: There's no indication of testing or documentation. Comprehensive tests and documentation are crucial for ensuring the code works as intended and is usable by others.
Suggestions:
Refactor for Clarity: Simplify complex functions, break down large functions into smaller, more manageable pieces, and use descriptive variable names.
Improve Efficiency: Analyze the code for potential inefficiencies and consider alternatives that could reduce complexity or execution time.
Implement Error Handling: Add error checking and handling to make the code more robust against invalid input and unexpected states.
Testing: Implement unit tests to cover various use cases and edge cases, ensuring the code behaves as expected.
Documentation: Provide detailed comments and documentation explaining the purpose of the code, how to use it, and describing the parameters and return values of functions.